.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "UTHASH" 3 "" "" ""
.SH NAME
uthash \- C macros to add, find and delete items from a hash
.SH "SYNOPSIS"

.nf
HASH_ADD        (hh_name, head, keyfield_name, key_len, item_ptr)
HASH_FIND       (hh_name, head, result_ptr, keyfield_name, key_ptr, key_len)
HASH_DELETE     (hh_name, head, item_ptr)
HASH_ADD_INT    (head, keyfield_name, item_ptr)
HASH_FIND_INT   (head, result_ptr, keyfield_name, key_ptr)
HASH_ADD_STR    (head, keyfield_name, item_ptr)
HASH_FIND_STR   (head, result_ptr, keyfield_name, key_ptr)
HASH_DEL        (hh_name, head, item_ptr)
.fi

.SH "DESCRIPTION"


These macros add, find and delete items from a hash\&.


The first three are the generalized macros, while the latter five are convenience macros which do the same thing as the generalized macros, but require fewer arguments\&. They have key and naming restrictions\&.


In order to use the convenience macros, the structure's UT_hash_handle field must be named hh\&. The key field must be of type int or pointer to char\&. (For HASH_DEL the key field restriction does not apply\&.)

.SH "ARGUMENTS"

.TP
hh_name
name of the UT_hash_handle field in the structure\&. Conventionally called hh\&.

.TP
head
the structure pointer variable which acts as the "head" of the hash\&. So named because this hash can also be iterated over as a doubly\-linked list\&.

.TP
keyfield_name
the name of the structure field which is the key (or in the case of an aggregate key, the first field of the key)\&.

.TP
key_len
the length of the key field in bytes\&. E\&.g\&. for an integer key, this is sizeof(int), while for a string key it's strlen(key)\&. For an aggregate key, see the notes in this guide on calculating aggregate key length\&.

.TP
key_ptr
pointer to the key being sought using HASH_FIND\&. I\&.e\&. this cannot be a literal value, it must be a pointer to a place in memory where the sought key is stored\&.

.TP
item_ptr
pointer to the structure being added or deleted

.TP
result_ptr
output pointer where HASH_FIND stores the address of the found item, or NULL if the item was not found

.SH "AUTHOR"


Written by Troy D\&. Hanson, <thanson@users\&.sourceforge\&.net: \fImailto:thanson@users.sourceforge.net\fR>

.SH "RESOURCES"


Main web site: http://uthash\&.sourceforge\&.net/: \fIhttp://uthash.sourceforge.net/\fR

