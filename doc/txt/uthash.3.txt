UTHASH(3)
===========
Troy D. Hanson <thanson@users.sourceforge.net>


NAME
----
uthash - C macros to add, find and delete items from a hash


SYNOPSIS
--------
    HASH_ADD        (hh_name, head, keyfield_name, key_len, item_ptr)
    HASH_FIND       (hh_name, head, result_ptr, keyfield_name, key_ptr, key_len)
    HASH_DELETE     (hh_name, head, item_ptr)
    HASH_ADD_INT    (head, keyfield_name, item_ptr)
    HASH_FIND_INT   (head, result_ptr, keyfield_name, key_ptr)
    HASH_ADD_STR    (head, keyfield_name, item_ptr)
    HASH_FIND_STR   (head, result_ptr, keyfield_name, key_ptr)
    HASH_DEL        (hh_name, head, item_ptr)

DESCRIPTION
-----------
These macros add, find and delete items from a hash.  

The first three are the generalized macros, while the latter five are 
convenience macros which do the same thing as the generalized macros, but
require fewer arguments.  They have key and naming restrictions.

In order to use the convenience macros, the structure's `UT_hash_handle` field
must be named `hh`.  The key field must be of type `int` or pointer to `char`,
except for `HASH_DEL`.

See the http://uthash.sourceforge.net/[uthash web site] for the complete User's
Guide.

ARGUMENTS
---------
hh_name::
    name of the `UT_hash_handle` field in the structure. Conventionally called
    `hh`.
head::
    the structure pointer variable which acts as the "head" of the hash. So
    named because this hash can also be iterated over as a doubly-linked list.
keyfield_name::
    the name of the structure field which is the key (or in the case of an
    aggregate key, the first field of the key).
key_len::
    the length of the key field in bytes. E.g. for an integer key, this is
    `sizeof(int)`, while for a string key it's `strlen(key)`. For an aggregate
    key, see the notes in this guide on calculating aggregate key length.
key_ptr::
    pointer to the key being sought using `HASH_FIND`. I.e. this cannot be a
    literal value, it must be a pointer to a place in memory where the sought
    key is stored.
item_ptr::
    pointer to the structure being added or deleted
result_ptr::
    output pointer where `HASH_FIND` stores the address of the found item, or
    NULL if the item was not found


AUTHOR
------
Written by Troy D. Hanson, <mailto:thanson@users.sourceforge.net[]>


RESOURCES
---------
uthash web site: http://uthash.sourceforge.net/[]
include::sflogo.txt[]

